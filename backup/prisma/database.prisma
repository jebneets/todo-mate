model User {
  id             String    @id @default(uuid())
  name           String?
  email          String?   @unique
  image          String?
  createdAt      DateTime  @default(now())
  accounts       Account[]
  sessions       Session[]
  taskLists      TaskList[]
}

model Account {
  id                 Int      @id @default(autoincrement())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         BigInt?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id             String   @id @default(uuid())
  sessionToken   String   @unique
  userId         String
  expires        DateTime
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model TaskList {
  id        String   @id @default(uuid())
  userId    String
  name      String
  icon      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[]
}

model Task {
  id          String   @id @default(uuid())
  taskListId  String
  title       String
  notes       String?
  dueDate     DateTime?
  isComplete  Boolean  @default(false)
  priority    String   @default("medium")
  createdAt   DateTime @default(now())
  taskList    TaskList @relation(fields: [taskListId], references: [id], onDelete: Cascade)
}
